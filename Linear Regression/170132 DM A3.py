# -*- coding: utf-8 -*-
"""DM Assi 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qIzMVBRzxaij8-PdL4ilF-Dhma1hRSOg

## Linear Regression
"""

from matplotlib import pyplot
from pandas import DataFrame
import numpy as np
import pandas as pd
import random
import copy
import random
import matplotlib.pyplot as plt
from scipy import stats


df=pd.read_csv('Dataset.csv')
data=df.to_numpy()
x_test = []
y_test = []

for i in range (100) :
  x_test.append ( data[i][0] )
  y_test.append ( data[i][1] )

h = 0
alpha = 0



def AlphaCheck (m,c, last_m, last_c, alpha) : # used to half alpha as per sign change
    changed = False 

    if ( m > 0 and last_m == -1 ) or ( m < 0 and last_m == 1 ) :
      alpha = alpha / 2
      changed = True
    else:
      if m>0 :
        last_m = 1
      else :
        last_m = -1
    
    if ( changed == False ) :
          if ( c > 0 and last_c == -1 ) or ( c < 0 and last_c == 1 ) :
            alpha = alpha / 2
            changed = True
          else:
            if c>0 :
              last_c = 1
            else :
              last_c = -1
    return alpha


def lossDerivative_M(m,c):
    d1 = lossFunction(m+h,c)
    d2 = lossFunction(m,c)
    d =  d1 - d2  
    d = d/h
    return d  

def lossDerivative_C(m,c):

    d1 = lossFunction(m,c+h)
    d2 = lossFunction(m,c)
    d =  d1 - d2  
    d = d/h
    return d  

def lossFunction(m,c):
  loss_1 = 0
  
  for i in range (100):
    ti = y_test[i]
    xi = x_test[i]
    loss_1 = loss_1 + (  ti - (m*xi +c)  )**2
  
  return loss_1



last_m = 1
last_c = 1
h = 0.002
alpha = 0.00001

m = random.randint(1,10)
c = random.randint(1,10)

for i in range (100):

    m = m - alpha * lossDerivative_M ( m, c)
    c = c - alpha * lossDerivative_C ( m, c )

    alpha  = AlphaCheck(m,c ,last_m,last_c, alpha)


plt.scatter(x_test, y_test)

x1 = np.linspace( 0 , 100, num =100)
y1 = m*x1+c
title = 'OUTPUT at m = ' + str(m) + ' and c = ' + str(c)
plt.title(title)
plt.plot(x1,y1,'-r')
plt.show()


def inputXgetY( x ) :
  y = m*x+c
  print ( ' At m = '+ str(m) +' and c = ' + str(y) )
  print ( ' you gave x = '+ str(x) +' and you got y = ' + str(y) )
  return y

inputXgetY(20)